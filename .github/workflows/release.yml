name: (Rust) Release Build and Publish

permissions:
  contents: write
  pull-requests: read

on:
  push:
    tags:
      - 'v*'
  pull_request:
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/flake.nix'
      - '**/*.nix'
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Name of release (optional)'
        required: false
        default: ''
      create_release:
        description: 'Create a GitHub release? (true/false)'
        required: false
        default: 'false'

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Generate matrix
        id: generate-matrix
        run: |
          MATRIX=$(nix run .#matrix --quiet)
          echo "Generated Matrix:"
          echo "$MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    env:
      LIB_NAME: 'libkito-${{ matrix.os }}-${{ matrix.arch }}'

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Build with Nix
        run: |
          echo "Building for ${{ matrix.os }}-${{ matrix.arch }}..."
          nix build ".#${{ matrix.os }}-${{ matrix.arch }}"

          case "${{ matrix.os }}" in
            linux) EXT=".so" ;;
            macos) EXT=".dylib" ;;
            windows) EXT=".dll" ;;
            *) echo "Unsupported OS: ${{ matrix.os }}"; exit 1 ;;
          esac

          mkdir -p dist
          cp result/lib/* dist/${{ env.LIB_NAME }}$EXT

      - name: Upload Library as artifact
        uses: actions/upload-artifact@v4
        with:
          name: libkito-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  create-release:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.create_release == 'true' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: --latest
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}

      - name: Get release name
        id: release_name
        run: |
          if [ -n "${{ github.event.inputs.release_name }}" ]; then
            echo "RELEASE_NAME=${{ github.event.inputs.release_name }}" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download Libraries
        uses: actions/download-artifact@v4
        with:
          path: libs

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          make_latest: true
          prerelease: ${{ steps.release_name.outputs.release_name != '' && contains(steps.release_name.outputs.release_name, 'a') }}
          tag_name: ${{ steps.release_name.outputs.release_name }}
          name: ${{ steps.release_name.outputs.release_name }}
          body: ${{ steps.git-cliff.outputs.content }}
          files: |
            libs/*
            CHANGES.md
